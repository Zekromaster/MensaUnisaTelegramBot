#!/usr/bin/env python3
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import telegram
import csv
import datetime
import sys
import os
import pathlib

from trender import TRender

# Env Vars
# Data Directory
DATADIR = pathlib.Path(os.getenv('HOME'), 'adisurc')
if os.getenv('DATADIR') is not None:
    DATADIR = pathlib.Path(os.getenv('DATADIR'))

MEAL = os.getenv('MEAL') or "0"
if MEAL != "0" and MEAL != "1":
    MEAL = "0"

# The Database files
DATABASE_MENUS = pathlib.Path(DATADIR, 'menus.csv')
DATABASE_DISHES = pathlib.Path(DATADIR, 'dishes.csv')
FILESDIR = pathlib.Path(DATADIR, 'files')

# Internal files
INTERNAL = pathlib.Path(DATADIR, '.telegrambot_data')
INTERNAL.mkdir(parents = True, exist_ok = True)
LAST_EXEC_FILE = pathlib.Path(INTERNAL, f'last_exec_{MEAL}') 

# Telegram Data
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

# Data to be used in operating the bot
UPLOAD_PNG = os.getenv('UPLOAD_PNG') is not None
DATE_OFFSET = int(os.getenv('DATE_OFFSET', 0))
TIME_OFFSET = int(os.getenv('TIME_OFFSET', 0))

"""
Searches a CSV file for all rows where certain fields match
certain values

Arguments:
    file: The csv file path
    fields: A list of tuples, in the form (field, value). Field
    should be a name and not a number.
Returns:
    All rows in the CSV file, as dicts, where the value of each of
    the fields specified in fields matches the specified value.
"""
def search_csv_fields(file, fields):
    def allfieldsmatch(row, fields):
        for field in fields:
            if row[field[0]] != field[1]:
                return False
        return True

    with open(file) as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        return [r for r in reader if allfieldsmatch(r, fields)]
    
"""
Arguments:
    date_offset: How many days to shift the date by
    time_offset: How many hours to shift the date by
Returns:
    The current date, shifted by `offset` days.
"""
def get_date(date_offset=0, time_offset=0):
    return (datetime.datetime.now() + datetime.timedelta(days=date_offset) + datetime.timedelta(hours=time_offset)).date()

"""
Arguments:
    date: The date for which to get the menu
    meal: 0 for Lunch, 1 for Dinner
Returns:
    The id of the latest menu matching the input date
    and meal. If there is no matching menu, returns None.
"""

def get_menu(date, meal):
    date = date.strftime("%Y%m%d")
    menu = search_csv_fields(DATABASE_MENUS, [('date', date), ('meal', str(meal))])
    if not menu:
        return None
    return max(
        menu,
        key=lambda x: x['id']
    )['id']

"""
Arguments:
    menu: The ID of the Menu for which to get the servings
Returns:
    A list of four lists, containing all options for (in order),
    first, second and third serving, plus the contents of the takeaway
    basket, all in string format.
"""
def get_servings(menu):
    dbdata = search_csv_fields(DATABASE_DISHES, [('menu', menu)])
    servings = [[] for _ in range(0,4)]
    for i in range(0, 4):
        serving = [s['contents'] for s in dbdata if s['serving'] == str(i)]
        servings[i].extend(serving)
    return servings

"""
Reports a result by writing it in the utility file in LAST_EXEC_FILE.

Arguments:
    status: A status. It should be s for success, f for failure or e for exception 
    date: The date for which to report a failure
"""
def report_result(status, date):
    with LAST_EXEC_FILE.open('w') as f:
        f.write(f'{status} {date.strftime("%Y%m%d")}')

"""
Gets the last execution result

Returns:
    A dict with two keys: `status` representing the status (s for success, f for failure,
    e for exception) and `date` representing the date. Can return None.
"""
def get_last_exec():
    if not LAST_EXEC_FILE.is_file():
        return None
    with LAST_EXEC_FILE.open('r') as f:
        first_line = f.readline().split(" ")
        return {'status': first_line[0], 'date': datetime.datetime.strptime(first_line[1], "%Y%m%d").date()}

# Actual logic
last_execution = get_last_exec()
date = get_date(DATE_OFFSET, TIME_OFFSET)

try:
    if (last_execution is not None) and (last_execution['status'] == 's') and (last_execution['date'] == date):
        print(f'Last execution already had success for meal #{MEAL} in date {date}. Exiting.')
        sys.exit()

    template = TRender('template.md', path=pathlib.Path(__file__).parent.absolute())
    mapmeals = {'0': "Pranzo", '1': "Cena"}

    bot = telegram.Bot(BOT_TOKEN)

    menu = get_menu(date, MEAL)
    if not menu:
        print(f'No menu found for meal #{MEAL} in date #{date}')
        report_result('f', date)
        sys.exit()

    first, second, contorno, takeaway = get_servings(menu)
    if len(takeaway) > 1:
        takeaway_first_part = ",".join([t for t in takeaway[:-1]])
        takeaway_last_element = takeaway[-1]
        takeaway = f'{takeaway_first_part} e {takeaway_last_element}'
    elif len(takeaway) == 1:
        takeaway = takeaway[0]

    render = template.render({
        'date': date.strftime("%d/%m/%Y"),
        'meal': mapmeals[MEAL],
        'first': first,
        'second': second,
        'contorno': contorno,
        'takeaway': takeaway
    })
    
    if UPLOAD_PNG:
        image = pathlib.Path(FILESDIR, f'{menu}.png')
        if image.is_file():
            with open(image, 'rb') as menupicture:
                bot.send_photo(CHANNEL_ID, menupicture, caption=render, parse_mode='MarkdownV2')
        else:
            bot.send_message(CHANNEL_ID, render, parse_mode='MarkdownV2')
    else:
        bot.send_message(CHANNEL_ID, render, parse_mode='MarkdownV2')

except Exception as e:
    print(e)
    report_result('e', date)
else:
    report_result('s', date)
